!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AS	a/makefile	/^AS = nasm$/;"	m
AS	b/makefile	/^AS = nasm$/;"	m
ASFLAGS	a/makefile	/^ASFLAGS = -f elf$/;"	m
ASFLAGS	b/makefile	/^ASFLAGS = -f elf$/;"	m
ASSERT	a/kernel/debug.h	13;"	d
ASSERT	a/kernel/debug.h	15;"	d
ASSERT	b/kernel/debug.h	13;"	d
ASSERT	b/kernel/debug.h	15;"	d
BITMAP_MASK	a/lib/kernel/bitmap.h	4;"	d
BITMAP_MASK	b/lib/kernel/bitmap.h	4;"	d
BUILD_DIR	a/makefile	/^BUILD_DIR = .\/build$/;"	m
BUILD_DIR	b/makefile	/^BUILD_DIR = .\/build$/;"	m
CC	a/makefile	/^CC = gcc$/;"	m
CC	b/makefile	/^CC = gcc$/;"	m
CFLAGS	a/makefile	/^CFLAGS = -Wall $(LIB) -c -fno-builtin -W -Wstrict-prototypes \\$/;"	m
CFLAGS	b/makefile	/^CFLAGS = -Wall $(LIB) -c -fno-builtin -W -Wstrict-prototypes \\$/;"	m
CODE_DESC	a/boot/loader.S	/^   CODE_DESC:  dd    0x0000FFFF $/;"	d
CODE_DESC	b/boot/loader.S	/^   CODE_DESC:  dd    0x0000FFFF $/;"	d
CONTRER0_PORT	a/device/timer.c	11;"	d	file:
CONTRER0_PORT	b/device/timer.c	11;"	d	file:
COUNTER0_NO	a/device/timer.c	12;"	d	file:
COUNTER0_NO	b/device/timer.c	12;"	d	file:
COUNTER0_VALUE	a/device/timer.c	10;"	d	file:
COUNTER0_VALUE	b/device/timer.c	10;"	d	file:
COUNTER_MODE	a/device/timer.c	13;"	d	file:
COUNTER_MODE	b/device/timer.c	13;"	d	file:
DATA_STACK_DESC	a/boot/loader.S	/^   DATA_STACK_DESC:  dd    0x0000FFFF$/;"	d
DATA_STACK_DESC	b/boot/loader.S	/^   DATA_STACK_DESC:  dd    0x0000FFFF$/;"	d
DESC_AVL	a/kernel/global.h	11;"	d
DESC_AVL	b/kernel/global.h	11;"	d
DESC_DPL_0	a/kernel/global.h	13;"	d
DESC_DPL_0	b/kernel/global.h	13;"	d
DESC_DPL_1	a/kernel/global.h	14;"	d
DESC_DPL_1	b/kernel/global.h	14;"	d
DESC_DPL_2	a/kernel/global.h	15;"	d
DESC_DPL_2	b/kernel/global.h	15;"	d
DESC_DPL_3	a/kernel/global.h	16;"	d
DESC_DPL_3	b/kernel/global.h	16;"	d
DESC_D_32	a/kernel/global.h	9;"	d
DESC_D_32	b/kernel/global.h	9;"	d
DESC_G_4K	a/kernel/global.h	8;"	d
DESC_G_4K	b/kernel/global.h	8;"	d
DESC_L	a/kernel/global.h	10;"	d
DESC_L	b/kernel/global.h	10;"	d
DESC_P	a/kernel/global.h	12;"	d
DESC_P	b/kernel/global.h	12;"	d
DESC_S_CODE	a/kernel/global.h	21;"	d
DESC_S_CODE	b/kernel/global.h	21;"	d
DESC_S_DATA	a/kernel/global.h	22;"	d
DESC_S_DATA	b/kernel/global.h	22;"	d
DESC_S_SYS	a/kernel/global.h	23;"	d
DESC_S_SYS	b/kernel/global.h	23;"	d
DESC_TYPE_CODE	a/kernel/global.h	24;"	d
DESC_TYPE_CODE	b/kernel/global.h	24;"	d
DESC_TYPE_DATA	a/kernel/global.h	25;"	d
DESC_TYPE_DATA	b/kernel/global.h	25;"	d
DESC_TYPE_TSS	a/kernel/global.h	26;"	d
DESC_TYPE_TSS	b/kernel/global.h	26;"	d
DIV_ROUND_UP	b/kernel/global.h	120;"	d
EFLAGS_IF	a/kernel/interrupt.c	14;"	d	file:
EFLAGS_IF	b/kernel/interrupt.c	14;"	d	file:
EFLAGS_IF_0	b/kernel/global.h	115;"	d
EFLAGS_IF_1	b/kernel/global.h	114;"	d
EFLAGS_IOPL_0	b/kernel/global.h	117;"	d
EFLAGS_IOPL_3	b/kernel/global.h	116;"	d
EFLAGS_MBS	b/kernel/global.h	113;"	d
ENTRY_POINT	a/makefile	/^ENTRY_POINT = 0xc0001500$/;"	m
ENTRY_POINT	b/makefile	/^ENTRY_POINT = 0xc0001500$/;"	m
GDT_ATTR_HIGH	a/kernel/global.h	46;"	d
GDT_ATTR_HIGH	b/kernel/global.h	46;"	d
GDT_BASE	a/boot/loader.S	/^   GDT_BASE:   dd    0x00000000 $/;"	d
GDT_BASE	b/boot/loader.S	/^   GDT_BASE:   dd    0x00000000 $/;"	d
GDT_CODE_ATTR_LOW_DPL3	a/kernel/global.h	47;"	d
GDT_CODE_ATTR_LOW_DPL3	b/kernel/global.h	47;"	d
GDT_DATA_ATTR_LOW_DPL3	a/kernel/global.h	48;"	d
GDT_DATA_ATTR_LOW_DPL3	b/kernel/global.h	48;"	d
GDT_LIMIT	a/boot/loader.S	/^   GDT_LIMIT   equ   GDT_SIZE -	1 $/;"	d
GDT_LIMIT	b/boot/loader.S	/^   GDT_LIMIT   equ   GDT_SIZE -	1 $/;"	d
GDT_SIZE	a/boot/loader.S	/^   GDT_SIZE   equ   $ - GDT_BASE$/;"	d
GDT_SIZE	b/boot/loader.S	/^   GDT_SIZE   equ   $ - GDT_BASE$/;"	d
GET_EFLAGS	a/kernel/interrupt.c	15;"	d	file:
GET_EFLAGS	b/kernel/interrupt.c	15;"	d	file:
IDT_DESC_16_TYPE	a/kernel/global.h	73;"	d
IDT_DESC_16_TYPE	b/kernel/global.h	64;"	d
IDT_DESC_32_TYPE	a/kernel/global.h	72;"	d
IDT_DESC_32_TYPE	b/kernel/global.h	63;"	d
IDT_DESC_ATTR_DPL0	a/kernel/global.h	74;"	d
IDT_DESC_ATTR_DPL0	b/kernel/global.h	65;"	d
IDT_DESC_ATTR_DPL3	a/kernel/global.h	75;"	d
IDT_DESC_ATTR_DPL3	b/kernel/global.h	66;"	d
IDT_DESC_CNT	a/kernel/interrupt.c	12;"	d	file:
IDT_DESC_CNT	b/kernel/interrupt.c	12;"	d	file:
IDT_DESC_DPL0	a/kernel/global.h	70;"	d
IDT_DESC_DPL0	b/kernel/global.h	61;"	d
IDT_DESC_DPL3	a/kernel/global.h	71;"	d
IDT_DESC_DPL3	b/kernel/global.h	62;"	d
IDT_DESC_P	a/kernel/global.h	69;"	d
IDT_DESC_P	b/kernel/global.h	60;"	d
INPUT_FREQUENCY	a/device/timer.c	9;"	d	file:
INPUT_FREQUENCY	b/device/timer.c	9;"	d	file:
INTR_OFF	a/kernel/interrupt.h	/^    INTR_OFF,			 \/\/ 中断关闭$/;"	e	enum:intr_status
INTR_OFF	b/kernel/interrupt.h	/^    INTR_OFF,			 \/\/ 中断关闭$/;"	e	enum:intr_status
INTR_ON	a/kernel/interrupt.h	/^    INTR_ON		         \/\/ 中断打开$/;"	e	enum:intr_status
INTR_ON	b/kernel/interrupt.h	/^    INTR_ON		         \/\/ 中断打开$/;"	e	enum:intr_status
IRQ0_FREQUENCY	a/device/timer.c	8;"	d	file:
IRQ0_FREQUENCY	b/device/timer.c	8;"	d	file:
KBD_BUF_PORT	a/device/keyboard.c	8;"	d	file:
KBD_BUF_PORT	b/device/keyboard.c	8;"	d	file:
K_HEAP_START	a/kernel/memory.c	22;"	d	file:
K_HEAP_START	b/kernel/memory.c	21;"	d	file:
LD	a/makefile	/^LD = ld$/;"	m
LD	b/makefile	/^LD = ld$/;"	m
LDFLAGS	a/makefile	/^LDFLAGS = -Ttext $(ENTRY_POINT) -e main -Map $(BUILD_DIR)\/kernel.map$/;"	m
LDFLAGS	b/makefile	/^LDFLAGS = -Ttext $(ENTRY_POINT) -e main -Map $(BUILD_DIR)\/kernel.map$/;"	m
LIB	a/makefile	/^LIB = -I lib\/ -I lib\/kernel\/ -I lib\/user\/ -I kernel\/ -I device\/ -I thread\/ -I userprog\/$/;"	m
LIB	b/makefile	/^LIB = -I lib\/ -I lib\/kernel\/ -I lib\/user\/ -I kernel\/ -I device\/ -I thread\/ -I userprog\/$/;"	m
MEM_BITMAP_BASE	a/kernel/memory.c	15;"	d	file:
MEM_BITMAP_BASE	b/kernel/memory.c	14;"	d	file:
NULL	a/kernel/global.h	78;"	d
NULL	b/kernel/global.h	119;"	d
OBJS	a/makefile	/^OBJS = $(BUILD_DIR)\/main.o $(BUILD_DIR)\/init.o $(BUILD_DIR)\/interrupt.o \\$/;"	m
OBJS	b/makefile	/^OBJS = $(BUILD_DIR)\/main.o $(BUILD_DIR)\/init.o $(BUILD_DIR)\/interrupt.o \\$/;"	m
PANIC	a/kernel/debug.h	9;"	d
PANIC	b/kernel/debug.h	9;"	d
PDE_IDX	a/kernel/memory.c	18;"	d	file:
PDE_IDX	b/kernel/memory.c	17;"	d	file:
PF_KERNEL	a/kernel/memory.h	/^   PF_KERNEL = 1,    \/\/ 内核内存池$/;"	e	enum:pool_flags
PF_KERNEL	b/kernel/memory.h	/^   PF_KERNEL = 1,    \/\/ 内核内存池$/;"	e	enum:pool_flags
PF_USER	a/kernel/memory.h	/^   PF_USER = 2	     \/\/ 用户内存池$/;"	e	enum:pool_flags
PF_USER	b/kernel/memory.h	/^   PF_USER = 2	     \/\/ 用户内存池$/;"	e	enum:pool_flags
PG_P_0	a/kernel/memory.h	13;"	d
PG_P_0	b/kernel/memory.h	13;"	d
PG_P_1	a/kernel/memory.h	12;"	d
PG_P_1	b/kernel/memory.h	12;"	d
PG_RW_R	a/kernel/memory.h	14;"	d
PG_RW_R	b/kernel/memory.h	14;"	d
PG_RW_W	a/kernel/memory.h	15;"	d
PG_RW_W	b/kernel/memory.h	15;"	d
PG_SIZE	a/kernel/global.h	83;"	d
PG_SIZE	a/kernel/memory.c	9;"	d	file:
PG_SIZE	a/thread/thread.c	10;"	d	file:
PG_SIZE	b/kernel/global.h	125;"	d
PG_US_S	a/kernel/memory.h	16;"	d
PG_US_S	b/kernel/memory.h	16;"	d
PG_US_U	a/kernel/memory.h	17;"	d
PG_US_U	b/kernel/memory.h	17;"	d
PIC_M_CTRL	a/kernel/interrupt.c	7;"	d	file:
PIC_M_CTRL	b/kernel/interrupt.c	7;"	d	file:
PIC_M_DATA	a/kernel/interrupt.c	8;"	d	file:
PIC_M_DATA	b/kernel/interrupt.c	8;"	d	file:
PIC_S_CTRL	a/kernel/interrupt.c	9;"	d	file:
PIC_S_CTRL	b/kernel/interrupt.c	9;"	d	file:
PIC_S_DATA	a/kernel/interrupt.c	10;"	d	file:
PIC_S_DATA	b/kernel/interrupt.c	10;"	d	file:
PIT_CONTROL_PORT	a/device/timer.c	15;"	d	file:
PIT_CONTROL_PORT	b/device/timer.c	15;"	d	file:
PTE_IDX	a/kernel/memory.c	19;"	d	file:
PTE_IDX	b/kernel/memory.c	18;"	d	file:
READ_WRITE_LATCH	a/device/timer.c	14;"	d	file:
READ_WRITE_LATCH	b/device/timer.c	14;"	d	file:
RPL0	a/kernel/global.h	29;"	d
RPL0	a/lib/kernel/print.S	/^RPL0  equ   0$/;"	d
RPL0	b/kernel/global.h	29;"	d
RPL0	b/lib/kernel/print.S	/^RPL0  equ   0$/;"	d
RPL1	a/kernel/global.h	30;"	d
RPL1	b/kernel/global.h	30;"	d
RPL2	a/kernel/global.h	31;"	d
RPL2	b/kernel/global.h	31;"	d
RPL3	a/kernel/global.h	32;"	d
RPL3	b/kernel/global.h	32;"	d
SECTION	a/boot/mbr.S	/^SECTION MBR vstart=0x7c00         $/;"	l
SECTION	b/boot/mbr.S	/^SECTION MBR vstart=0x7c00         $/;"	l
SELECTOR_CODE	a/boot/loader.S	/^   SELECTOR_CODE equ (0x0001<<3) + TI_GDT + RPL0         ; 相当于(CODE_DESC - GDT_BASE)\/8 + TI_GDT + RPL0$/;"	d
SELECTOR_CODE	b/boot/loader.S	/^   SELECTOR_CODE equ (0x0001<<3) + TI_GDT + RPL0         ; 相当于(CODE_DESC - GDT_BASE)\/8 + TI_GDT + RPL0$/;"	d
SELECTOR_DATA	a/boot/loader.S	/^   SELECTOR_DATA equ (0x0002<<3) + TI_GDT + RPL0	 ; 同上$/;"	d
SELECTOR_DATA	b/boot/loader.S	/^   SELECTOR_DATA equ (0x0002<<3) + TI_GDT + RPL0	 ; 同上$/;"	d
SELECTOR_K_CODE	a/kernel/global.h	37;"	d
SELECTOR_K_CODE	b/kernel/global.h	37;"	d
SELECTOR_K_DATA	a/kernel/global.h	38;"	d
SELECTOR_K_DATA	b/kernel/global.h	38;"	d
SELECTOR_K_GS	a/kernel/global.h	40;"	d
SELECTOR_K_GS	b/kernel/global.h	40;"	d
SELECTOR_K_STACK	a/kernel/global.h	39;"	d
SELECTOR_K_STACK	b/kernel/global.h	39;"	d
SELECTOR_TSS	a/kernel/global.h	56;"	d
SELECTOR_TSS	b/kernel/global.h	56;"	d
SELECTOR_U_CODE	a/kernel/global.h	42;"	d
SELECTOR_U_CODE	b/kernel/global.h	42;"	d
SELECTOR_U_DATA	a/kernel/global.h	43;"	d
SELECTOR_U_DATA	b/kernel/global.h	43;"	d
SELECTOR_U_STACK	a/kernel/global.h	44;"	d
SELECTOR_U_STACK	b/kernel/global.h	44;"	d
SELECTOR_VIDEO	a/boot/loader.S	/^   SELECTOR_VIDEO equ (0x0003<<3) + TI_GDT + RPL0	 ; 同上 $/;"	d
SELECTOR_VIDEO	a/lib/kernel/print.S	/^SELECTOR_VIDEO equ (0x0003<<3) + TI_GDT + RPL0$/;"	d
SELECTOR_VIDEO	b/boot/loader.S	/^   SELECTOR_VIDEO equ (0x0003<<3) + TI_GDT + RPL0	 ; 同上 $/;"	d
SELECTOR_VIDEO	b/lib/kernel/print.S	/^SELECTOR_VIDEO equ (0x0003<<3) + TI_GDT + RPL0$/;"	d
TASK_BLOCKED	a/thread/thread.h	/^   TASK_BLOCKED,$/;"	e	enum:task_status
TASK_BLOCKED	b/thread/thread.h	/^   TASK_BLOCKED,$/;"	e	enum:task_status
TASK_DIED	a/thread/thread.h	/^   TASK_DIED$/;"	e	enum:task_status
TASK_DIED	b/thread/thread.h	/^   TASK_DIED$/;"	e	enum:task_status
TASK_HANGING	a/thread/thread.h	/^   TASK_HANGING,$/;"	e	enum:task_status
TASK_HANGING	b/thread/thread.h	/^   TASK_HANGING,$/;"	e	enum:task_status
TASK_READY	a/thread/thread.h	/^   TASK_READY,$/;"	e	enum:task_status
TASK_READY	b/thread/thread.h	/^   TASK_READY,$/;"	e	enum:task_status
TASK_RUNNING	a/thread/thread.h	/^   TASK_RUNNING,$/;"	e	enum:task_status
TASK_RUNNING	b/thread/thread.h	/^   TASK_RUNNING,$/;"	e	enum:task_status
TASK_WAITING	a/thread/thread.h	/^   TASK_WAITING,$/;"	e	enum:task_status
TASK_WAITING	b/thread/thread.h	/^   TASK_WAITING,$/;"	e	enum:task_status
TI_GDT	a/kernel/global.h	34;"	d
TI_GDT	a/lib/kernel/print.S	/^TI_GDT equ  0$/;"	d
TI_GDT	b/kernel/global.h	34;"	d
TI_GDT	b/lib/kernel/print.S	/^TI_GDT equ  0$/;"	d
TI_LDT	a/kernel/global.h	35;"	d
TI_LDT	b/kernel/global.h	35;"	d
TSS_ATTR_HIGH	a/kernel/global.h	54;"	d
TSS_ATTR_HIGH	b/kernel/global.h	54;"	d
TSS_ATTR_LOW	a/kernel/global.h	55;"	d
TSS_ATTR_LOW	b/kernel/global.h	55;"	d
TSS_DESC_D	a/kernel/global.h	52;"	d
TSS_DESC_D	b/kernel/global.h	52;"	d
USER_STACK3_VADDR	b/userprog/process.h	6;"	d
USER_VADDR_START	b/userprog/process.h	7;"	d
VECTOR	a/kernel/kernel.S	/^VECTOR 0x00,ZERO$/;"	l
VECTOR	a/kernel/kernel.S	/^VECTOR 0x01,ZERO$/;"	l
VECTOR	a/kernel/kernel.S	/^VECTOR 0x02,ZERO$/;"	l
VECTOR	a/kernel/kernel.S	/^VECTOR 0x03,ZERO $/;"	l
VECTOR	a/kernel/kernel.S	/^VECTOR 0x04,ZERO$/;"	l
VECTOR	a/kernel/kernel.S	/^VECTOR 0x05,ZERO$/;"	l
VECTOR	a/kernel/kernel.S	/^VECTOR 0x06,ZERO$/;"	l
VECTOR	a/kernel/kernel.S	/^VECTOR 0x07,ZERO $/;"	l
VECTOR	a/kernel/kernel.S	/^VECTOR 0x08,ERROR_CODE$/;"	l
VECTOR	a/kernel/kernel.S	/^VECTOR 0x09,ZERO$/;"	l
VECTOR	a/kernel/kernel.S	/^VECTOR 0x0a,ERROR_CODE$/;"	l
VECTOR	a/kernel/kernel.S	/^VECTOR 0x0b,ERROR_CODE $/;"	l
VECTOR	a/kernel/kernel.S	/^VECTOR 0x0c,ZERO$/;"	l
VECTOR	a/kernel/kernel.S	/^VECTOR 0x0d,ERROR_CODE$/;"	l
VECTOR	a/kernel/kernel.S	/^VECTOR 0x0e,ERROR_CODE$/;"	l
VECTOR	a/kernel/kernel.S	/^VECTOR 0x0f,ZERO $/;"	l
VECTOR	a/kernel/kernel.S	/^VECTOR 0x10,ZERO$/;"	l
VECTOR	a/kernel/kernel.S	/^VECTOR 0x11,ERROR_CODE$/;"	l
VECTOR	a/kernel/kernel.S	/^VECTOR 0x12,ZERO$/;"	l
VECTOR	a/kernel/kernel.S	/^VECTOR 0x13,ZERO $/;"	l
VECTOR	a/kernel/kernel.S	/^VECTOR 0x14,ZERO$/;"	l
VECTOR	a/kernel/kernel.S	/^VECTOR 0x15,ZERO$/;"	l
VECTOR	a/kernel/kernel.S	/^VECTOR 0x16,ZERO$/;"	l
VECTOR	a/kernel/kernel.S	/^VECTOR 0x17,ZERO $/;"	l
VECTOR	a/kernel/kernel.S	/^VECTOR 0x18,ERROR_CODE$/;"	l
VECTOR	a/kernel/kernel.S	/^VECTOR 0x19,ZERO$/;"	l
VECTOR	a/kernel/kernel.S	/^VECTOR 0x1a,ERROR_CODE$/;"	l
VECTOR	a/kernel/kernel.S	/^VECTOR 0x1b,ERROR_CODE $/;"	l
VECTOR	a/kernel/kernel.S	/^VECTOR 0x1c,ZERO$/;"	l
VECTOR	a/kernel/kernel.S	/^VECTOR 0x1d,ERROR_CODE$/;"	l
VECTOR	a/kernel/kernel.S	/^VECTOR 0x1e,ERROR_CODE$/;"	l
VECTOR	a/kernel/kernel.S	/^VECTOR 0x1f,ZERO $/;"	l
VECTOR	a/kernel/kernel.S	/^VECTOR 0x20,ZERO	;时钟中断对应的入口$/;"	l
VECTOR	a/kernel/kernel.S	/^VECTOR 0x21,ZERO	;键盘中断对应的入口$/;"	l
VECTOR	a/kernel/kernel.S	/^VECTOR 0x22,ZERO	;级联用的$/;"	l
VECTOR	a/kernel/kernel.S	/^VECTOR 0x23,ZERO	;串口2对应的入口$/;"	l
VECTOR	a/kernel/kernel.S	/^VECTOR 0x24,ZERO	;串口1对应的入口$/;"	l
VECTOR	a/kernel/kernel.S	/^VECTOR 0x25,ZERO	;并口2对应的入口$/;"	l
VECTOR	a/kernel/kernel.S	/^VECTOR 0x26,ZERO	;软盘对应的入口$/;"	l
VECTOR	a/kernel/kernel.S	/^VECTOR 0x27,ZERO	;并口1对应的入口$/;"	l
VECTOR	a/kernel/kernel.S	/^VECTOR 0x28,ZERO	;实时时钟对应的入口$/;"	l
VECTOR	a/kernel/kernel.S	/^VECTOR 0x29,ZERO	;重定向$/;"	l
VECTOR	a/kernel/kernel.S	/^VECTOR 0x2a,ZERO	;保留$/;"	l
VECTOR	a/kernel/kernel.S	/^VECTOR 0x2b,ZERO	;保留$/;"	l
VECTOR	a/kernel/kernel.S	/^VECTOR 0x2c,ZERO	;ps\/2鼠标$/;"	l
VECTOR	a/kernel/kernel.S	/^VECTOR 0x2d,ZERO	;fpu浮点单元异常$/;"	l
VECTOR	a/kernel/kernel.S	/^VECTOR 0x2e,ZERO	;硬盘$/;"	l
VECTOR	a/kernel/kernel.S	/^VECTOR 0x2f,ZERO	;保留$/;"	l
VECTOR	b/kernel/kernel.S	/^VECTOR 0x00,ZERO$/;"	l
VECTOR	b/kernel/kernel.S	/^VECTOR 0x01,ZERO$/;"	l
VECTOR	b/kernel/kernel.S	/^VECTOR 0x02,ZERO$/;"	l
VECTOR	b/kernel/kernel.S	/^VECTOR 0x03,ZERO $/;"	l
VECTOR	b/kernel/kernel.S	/^VECTOR 0x04,ZERO$/;"	l
VECTOR	b/kernel/kernel.S	/^VECTOR 0x05,ZERO$/;"	l
VECTOR	b/kernel/kernel.S	/^VECTOR 0x06,ZERO$/;"	l
VECTOR	b/kernel/kernel.S	/^VECTOR 0x07,ZERO $/;"	l
VECTOR	b/kernel/kernel.S	/^VECTOR 0x08,ERROR_CODE$/;"	l
VECTOR	b/kernel/kernel.S	/^VECTOR 0x09,ZERO$/;"	l
VECTOR	b/kernel/kernel.S	/^VECTOR 0x0a,ERROR_CODE$/;"	l
VECTOR	b/kernel/kernel.S	/^VECTOR 0x0b,ERROR_CODE $/;"	l
VECTOR	b/kernel/kernel.S	/^VECTOR 0x0c,ZERO$/;"	l
VECTOR	b/kernel/kernel.S	/^VECTOR 0x0d,ERROR_CODE$/;"	l
VECTOR	b/kernel/kernel.S	/^VECTOR 0x0e,ERROR_CODE$/;"	l
VECTOR	b/kernel/kernel.S	/^VECTOR 0x0f,ZERO $/;"	l
VECTOR	b/kernel/kernel.S	/^VECTOR 0x10,ZERO$/;"	l
VECTOR	b/kernel/kernel.S	/^VECTOR 0x11,ERROR_CODE$/;"	l
VECTOR	b/kernel/kernel.S	/^VECTOR 0x12,ZERO$/;"	l
VECTOR	b/kernel/kernel.S	/^VECTOR 0x13,ZERO $/;"	l
VECTOR	b/kernel/kernel.S	/^VECTOR 0x14,ZERO$/;"	l
VECTOR	b/kernel/kernel.S	/^VECTOR 0x15,ZERO$/;"	l
VECTOR	b/kernel/kernel.S	/^VECTOR 0x16,ZERO$/;"	l
VECTOR	b/kernel/kernel.S	/^VECTOR 0x17,ZERO $/;"	l
VECTOR	b/kernel/kernel.S	/^VECTOR 0x18,ERROR_CODE$/;"	l
VECTOR	b/kernel/kernel.S	/^VECTOR 0x19,ZERO$/;"	l
VECTOR	b/kernel/kernel.S	/^VECTOR 0x1a,ERROR_CODE$/;"	l
VECTOR	b/kernel/kernel.S	/^VECTOR 0x1b,ERROR_CODE $/;"	l
VECTOR	b/kernel/kernel.S	/^VECTOR 0x1c,ZERO$/;"	l
VECTOR	b/kernel/kernel.S	/^VECTOR 0x1d,ERROR_CODE$/;"	l
VECTOR	b/kernel/kernel.S	/^VECTOR 0x1e,ERROR_CODE$/;"	l
VECTOR	b/kernel/kernel.S	/^VECTOR 0x1f,ZERO $/;"	l
VECTOR	b/kernel/kernel.S	/^VECTOR 0x20,ZERO	;时钟中断对应的入口$/;"	l
VECTOR	b/kernel/kernel.S	/^VECTOR 0x21,ZERO	;键盘中断对应的入口$/;"	l
VECTOR	b/kernel/kernel.S	/^VECTOR 0x22,ZERO	;级联用的$/;"	l
VECTOR	b/kernel/kernel.S	/^VECTOR 0x23,ZERO	;串口2对应的入口$/;"	l
VECTOR	b/kernel/kernel.S	/^VECTOR 0x24,ZERO	;串口1对应的入口$/;"	l
VECTOR	b/kernel/kernel.S	/^VECTOR 0x25,ZERO	;并口2对应的入口$/;"	l
VECTOR	b/kernel/kernel.S	/^VECTOR 0x26,ZERO	;软盘对应的入口$/;"	l
VECTOR	b/kernel/kernel.S	/^VECTOR 0x27,ZERO	;并口1对应的入口$/;"	l
VECTOR	b/kernel/kernel.S	/^VECTOR 0x28,ZERO	;实时时钟对应的入口$/;"	l
VECTOR	b/kernel/kernel.S	/^VECTOR 0x29,ZERO	;重定向$/;"	l
VECTOR	b/kernel/kernel.S	/^VECTOR 0x2a,ZERO	;保留$/;"	l
VECTOR	b/kernel/kernel.S	/^VECTOR 0x2b,ZERO	;保留$/;"	l
VECTOR	b/kernel/kernel.S	/^VECTOR 0x2c,ZERO	;ps\/2鼠标$/;"	l
VECTOR	b/kernel/kernel.S	/^VECTOR 0x2d,ZERO	;fpu浮点单元异常$/;"	l
VECTOR	b/kernel/kernel.S	/^VECTOR 0x2e,ZERO	;硬盘$/;"	l
VECTOR	b/kernel/kernel.S	/^VECTOR 0x2f,ZERO	;保留$/;"	l
VIDEO_DESC	a/boot/loader.S	/^   VIDEO_DESC: dd    0x80000007	       ; limit=(0xbffff-0xb8000)\/4k=0x7$/;"	d
VIDEO_DESC	b/boot/loader.S	/^   VIDEO_DESC: dd    0x80000007	       ; limit=(0xbffff-0xb8000)\/4k=0x7$/;"	d
__DEVICE_CONSOLE_H	a/device/console.h	2;"	d
__DEVICE_CONSOLE_H	b/device/console.h	2;"	d
__DEVICE_IOQUEUE_H	a/device/ioqueue.h	2;"	d
__DEVICE_IOQUEUE_H	b/device/ioqueue.h	2;"	d
__DEVICE_KEYBOARD_H	a/device/keyboard.h	2;"	d
__DEVICE_KEYBOARD_H	b/device/keyboard.h	2;"	d
__DEVICE_TIME_H	a/device/timer.h	2;"	d
__DEVICE_TIME_H	b/device/timer.h	2;"	d
__KERNEL_DEBUG_H	a/kernel/debug.h	2;"	d
__KERNEL_DEBUG_H	b/kernel/debug.h	2;"	d
__KERNEL_GLOBAL_H	a/kernel/global.h	2;"	d
__KERNEL_GLOBAL_H	b/kernel/global.h	2;"	d
__KERNEL_INIT_H	a/kernel/init.h	2;"	d
__KERNEL_INIT_H	b/kernel/init.h	2;"	d
__KERNEL_INTERRUPT_H	a/kernel/interrupt.h	2;"	d
__KERNEL_INTERRUPT_H	b/kernel/interrupt.h	2;"	d
__KERNEL_MEMORY_H	a/kernel/memory.h	2;"	d
__KERNEL_MEMORY_H	b/kernel/memory.h	2;"	d
__LIB_IO_H	a/lib/kernel/io.h	12;"	d
__LIB_IO_H	b/lib/kernel/io.h	12;"	d
__LIB_KERNEL_BITMAP_H	a/lib/kernel/bitmap.h	2;"	d
__LIB_KERNEL_BITMAP_H	b/lib/kernel/bitmap.h	2;"	d
__LIB_KERNEL_LIST_H	a/lib/kernel/list.h	2;"	d
__LIB_KERNEL_LIST_H	b/lib/kernel/list.h	2;"	d
__LIB_KERNEL_PRINT_H	a/lib/kernel/print.h	2;"	d
__LIB_KERNEL_PRINT_H	b/lib/kernel/print.h	2;"	d
__LIB_STDINT_H	a/lib/stdint.h	2;"	d
__LIB_STDINT_H	b/lib/stdint.h	2;"	d
__LIB_STRING_H	a/lib/string.h	2;"	d
__LIB_STRING_H	b/lib/string.h	2;"	d
__THREAD_SYNC_H	a/thread/sync.h	2;"	d
__THREAD_SYNC_H	b/thread/sync.h	2;"	d
__THREAD_THREAD_H	a/thread/thread.h	2;"	d
__THREAD_THREAD_H	b/thread/thread.h	2;"	d
__USERPROG_PROCESS_H	b/userprog/process.h	2;"	d
__USERPROG_TSS_H	a/userprog/tss.h	2;"	d
__USERPROG_TSS_H	b/userprog/tss.h	2;"	d
addr_v2p	b/kernel/memory.c	/^uint32_t addr_v2p(uint32_t vaddr) {$/;"	f
all_list_tag	a/thread/thread.h	/^   struct list_elem all_list_tag;$/;"	m	struct:task_struct	typeref:struct:task_struct::list_elem
all_list_tag	b/thread/thread.h	/^   struct list_elem all_list_tag;$/;"	m	struct:task_struct	typeref:struct:task_struct::list_elem
alt_l_char	a/device/keyboard.c	23;"	d	file:
alt_l_char	b/device/keyboard.c	23;"	d	file:
alt_l_make	a/device/keyboard.c	30;"	d	file:
alt_l_make	b/device/keyboard.c	30;"	d	file:
alt_r_break	a/device/keyboard.c	32;"	d	file:
alt_r_break	b/device/keyboard.c	32;"	d	file:
alt_r_char	a/device/keyboard.c	24;"	d	file:
alt_r_char	b/device/keyboard.c	24;"	d	file:
alt_r_make	a/device/keyboard.c	31;"	d	file:
alt_r_make	b/device/keyboard.c	31;"	d	file:
alt_status	a/device/keyboard.c	/^static bool ctrl_status, shift_status, alt_status, caps_lock_status, ext_scancode;$/;"	v	file:
alt_status	b/device/keyboard.c	/^static bool ctrl_status, shift_status, alt_status, caps_lock_status, ext_scancode;$/;"	v	file:
ards_nr	a/boot/loader.S	/^   ards_nr dw 0		      ;用于记录ards结构体数量$/;"	d
ards_nr	b/boot/loader.S	/^   ards_nr dw 0		      ;用于记录ards结构体数量$/;"	d
attr_low_byte	a/kernel/global.h	/^   uint8_t  attr_low_byte;$/;"	m	struct:gdt_desc
attr_low_byte	b/kernel/global.h	/^   uint8_t  attr_low_byte;$/;"	m	struct:gdt_desc
attribute	a/kernel/interrupt.c	/^   uint8_t     attribute;$/;"	m	struct:gate_desc	file:
attribute	b/kernel/interrupt.c	/^   uint8_t     attribute;$/;"	m	struct:gate_desc	file:
backlink	a/userprog/tss.c	/^    uint32_t backlink;$/;"	m	struct:tss	file:
backlink	b/userprog/tss.c	/^    uint32_t backlink;$/;"	m	struct:tss	file:
backspace	a/device/keyboard.c	12;"	d	file:
backspace	b/device/keyboard.c	12;"	d	file:
base_high_byte	a/kernel/global.h	/^   uint8_t  base_high_byte;$/;"	m	struct:gdt_desc
base_high_byte	b/kernel/global.h	/^   uint8_t  base_high_byte;$/;"	m	struct:gdt_desc
base_low_word	a/kernel/global.h	/^   uint16_t base_low_word;$/;"	m	struct:gdt_desc
base_low_word	b/kernel/global.h	/^   uint16_t base_low_word;$/;"	m	struct:gdt_desc
base_mid_byte	a/kernel/global.h	/^   uint8_t  base_mid_byte;$/;"	m	struct:gdt_desc
base_mid_byte	b/kernel/global.h	/^   uint8_t  base_mid_byte;$/;"	m	struct:gdt_desc
bitmap	a/lib/kernel/bitmap.h	/^struct bitmap {$/;"	s
bitmap	b/lib/kernel/bitmap.h	/^struct bitmap {$/;"	s
bitmap_init	a/lib/kernel/bitmap.c	/^void bitmap_init(struct bitmap* btmp) {$/;"	f
bitmap_init	b/lib/kernel/bitmap.c	/^void bitmap_init(struct bitmap* btmp) {$/;"	f
bitmap_scan	a/lib/kernel/bitmap.c	/^int bitmap_scan(struct bitmap* btmp, uint32_t cnt) {$/;"	f
bitmap_scan	b/lib/kernel/bitmap.c	/^int bitmap_scan(struct bitmap* btmp, uint32_t cnt) {$/;"	f
bitmap_scan_test	a/lib/kernel/bitmap.c	/^bool bitmap_scan_test(struct bitmap* btmp, uint32_t bit_idx) {$/;"	f
bitmap_scan_test	b/lib/kernel/bitmap.c	/^bool bitmap_scan_test(struct bitmap* btmp, uint32_t bit_idx) {$/;"	f
bitmap_set	a/lib/kernel/bitmap.c	/^void bitmap_set(struct bitmap* btmp, uint32_t bit_idx, int8_t value) {$/;"	f
bitmap_set	b/lib/kernel/bitmap.c	/^void bitmap_set(struct bitmap* btmp, uint32_t bit_idx, int8_t value) {$/;"	f
bits	a/lib/kernel/bitmap.h	/^   uint8_t* bits;$/;"	m	struct:bitmap
bits	b/lib/kernel/bitmap.h	/^   uint8_t* bits;$/;"	m	struct:bitmap
bool	a/kernel/global.h	79;"	d
bool	b/kernel/global.h	121;"	d
btmp_bytes_len	a/lib/kernel/bitmap.h	/^   uint32_t btmp_bytes_len;$/;"	m	struct:bitmap
btmp_bytes_len	b/lib/kernel/bitmap.h	/^   uint32_t btmp_bytes_len;$/;"	m	struct:bitmap
buf	a/device/ioqueue.h	/^    char buf[bufsize];			    \/\/ 缓冲区大小$/;"	m	struct:ioqueue
buf	b/device/ioqueue.h	/^    char buf[bufsize];			    \/\/ 缓冲区大小$/;"	m	struct:ioqueue
bufsize	a/device/ioqueue.h	7;"	d
bufsize	b/device/ioqueue.h	7;"	d
caps_lock_char	a/device/keyboard.c	25;"	d	file:
caps_lock_char	b/device/keyboard.c	25;"	d	file:
caps_lock_make	a/device/keyboard.c	36;"	d	file:
caps_lock_make	b/device/keyboard.c	36;"	d	file:
caps_lock_status	a/device/keyboard.c	/^static bool ctrl_status, shift_status, alt_status, caps_lock_status, ext_scancode;$/;"	v	file:
caps_lock_status	b/device/keyboard.c	/^static bool ctrl_status, shift_status, alt_status, caps_lock_status, ext_scancode;$/;"	v	file:
char_invisible	a/device/keyboard.c	18;"	d	file:
char_invisible	b/device/keyboard.c	18;"	d	file:
console_acquire	a/device/console.c	/^void console_acquire() {$/;"	f
console_acquire	b/device/console.c	/^void console_acquire() {$/;"	f
console_init	a/device/console.c	/^void console_init() {$/;"	f
console_init	b/device/console.c	/^void console_init() {$/;"	f
console_lock	a/device/console.c	/^static struct lock console_lock;    \/\/ 控制台锁$/;"	v	typeref:struct:lock	file:
console_lock	b/device/console.c	/^static struct lock console_lock;    \/\/ 控制台锁$/;"	v	typeref:struct:lock	file:
console_put_char	a/device/console.c	/^void console_put_char(uint8_t char_asci) {$/;"	f
console_put_char	b/device/console.c	/^void console_put_char(uint8_t char_asci) {$/;"	f
console_put_int	a/device/console.c	/^void console_put_int(uint32_t num) {$/;"	f
console_put_int	b/device/console.c	/^void console_put_int(uint32_t num) {$/;"	f
console_put_str	a/device/console.c	/^void console_put_str(char* str) {$/;"	f
console_put_str	b/device/console.c	/^void console_put_str(char* str) {$/;"	f
console_release	a/device/console.c	/^void console_release() {$/;"	f
console_release	b/device/console.c	/^void console_release() {$/;"	f
consumer	a/device/ioqueue.h	/^    struct task_struct* consumer;$/;"	m	struct:ioqueue	typeref:struct:ioqueue::task_struct
consumer	b/device/ioqueue.h	/^    struct task_struct* consumer;$/;"	m	struct:ioqueue	typeref:struct:ioqueue::task_struct
cr3	a/userprog/tss.c	/^    uint32_t cr3;$/;"	m	struct:tss	file:
cr3	b/userprog/tss.c	/^    uint32_t cr3;$/;"	m	struct:tss	file:
create_page_dir	b/userprog/process.c	/^uint32_t* create_page_dir(void) {$/;"	f
create_user_vaddr_bitmap	b/userprog/process.c	/^void create_user_vaddr_bitmap(struct task_struct* user_prog) {$/;"	f
cs	a/thread/thread.h	/^    uint32_t cs;$/;"	m	struct:intr_stack
cs	a/userprog/tss.c	/^    uint32_t cs;$/;"	m	struct:tss	file:
cs	b/thread/thread.h	/^    uint32_t cs;$/;"	m	struct:intr_stack
cs	b/userprog/tss.c	/^    uint32_t cs;$/;"	m	struct:tss	file:
ctrl_l_char	a/device/keyboard.c	19;"	d	file:
ctrl_l_char	b/device/keyboard.c	19;"	d	file:
ctrl_l_make	a/device/keyboard.c	33;"	d	file:
ctrl_l_make	b/device/keyboard.c	33;"	d	file:
ctrl_r_break	a/device/keyboard.c	35;"	d	file:
ctrl_r_break	b/device/keyboard.c	35;"	d	file:
ctrl_r_char	a/device/keyboard.c	20;"	d	file:
ctrl_r_char	b/device/keyboard.c	20;"	d	file:
ctrl_r_make	a/device/keyboard.c	34;"	d	file:
ctrl_r_make	b/device/keyboard.c	34;"	d	file:
ctrl_status	a/device/keyboard.c	/^static bool ctrl_status, shift_status, alt_status, caps_lock_status, ext_scancode;$/;"	v	file:
ctrl_status	b/device/keyboard.c	/^static bool ctrl_status, shift_status, alt_status, caps_lock_status, ext_scancode;$/;"	v	file:
dcount	a/kernel/interrupt.c	/^   uint8_t     dcount;   \/\/此项为双字计数字段，是门描述符中的第4字节。此项固定值，不用考虑$/;"	m	struct:gate_desc	file:
dcount	b/kernel/interrupt.c	/^   uint8_t     dcount;   \/\/此项为双字计数字段，是门描述符中的第4字节。此项固定值，不用考虑$/;"	m	struct:gate_desc	file:
default_prio	b/userprog/process.h	5;"	d
delete	a/device/keyboard.c	15;"	d	file:
delete	b/device/keyboard.c	15;"	d	file:
ds	a/thread/thread.h	/^    uint32_t ds;$/;"	m	struct:intr_stack
ds	a/userprog/tss.c	/^    uint32_t ds;$/;"	m	struct:tss	file:
ds	b/thread/thread.h	/^    uint32_t ds;$/;"	m	struct:intr_stack
ds	b/userprog/tss.c	/^    uint32_t ds;$/;"	m	struct:tss	file:
eax	a/thread/thread.h	/^    uint32_t eax;$/;"	m	struct:intr_stack
eax	a/userprog/tss.c	/^    uint32_t eax;$/;"	m	struct:tss	file:
eax	b/thread/thread.h	/^    uint32_t eax;$/;"	m	struct:intr_stack
eax	b/userprog/tss.c	/^    uint32_t eax;$/;"	m	struct:tss	file:
ebp	a/thread/thread.h	/^    uint32_t ebp;$/;"	m	struct:intr_stack
ebp	a/thread/thread.h	/^   uint32_t ebp;$/;"	m	struct:thread_stack
ebp	a/userprog/tss.c	/^    uint32_t ebp;$/;"	m	struct:tss	file:
ebp	b/thread/thread.h	/^    uint32_t ebp;$/;"	m	struct:intr_stack
ebp	b/thread/thread.h	/^   uint32_t ebp;$/;"	m	struct:thread_stack
ebp	b/userprog/tss.c	/^    uint32_t ebp;$/;"	m	struct:tss	file:
ebx	a/thread/thread.h	/^    uint32_t ebx;$/;"	m	struct:intr_stack
ebx	a/thread/thread.h	/^   uint32_t ebx;$/;"	m	struct:thread_stack
ebx	a/userprog/tss.c	/^    uint32_t ebx;$/;"	m	struct:tss	file:
ebx	b/thread/thread.h	/^    uint32_t ebx;$/;"	m	struct:intr_stack
ebx	b/thread/thread.h	/^   uint32_t ebx;$/;"	m	struct:thread_stack
ebx	b/userprog/tss.c	/^    uint32_t ebx;$/;"	m	struct:tss	file:
ecx	a/thread/thread.h	/^    uint32_t ecx;$/;"	m	struct:intr_stack
ecx	a/userprog/tss.c	/^    uint32_t ecx;$/;"	m	struct:tss	file:
ecx	b/thread/thread.h	/^    uint32_t ecx;$/;"	m	struct:intr_stack
ecx	b/userprog/tss.c	/^    uint32_t ecx;$/;"	m	struct:tss	file:
edi	a/thread/thread.h	/^    uint32_t edi;$/;"	m	struct:intr_stack
edi	a/thread/thread.h	/^   uint32_t edi;$/;"	m	struct:thread_stack
edi	a/userprog/tss.c	/^    uint32_t edi;$/;"	m	struct:tss	file:
edi	b/thread/thread.h	/^    uint32_t edi;$/;"	m	struct:intr_stack
edi	b/thread/thread.h	/^   uint32_t edi;$/;"	m	struct:thread_stack
edi	b/userprog/tss.c	/^    uint32_t edi;$/;"	m	struct:tss	file:
edx	a/thread/thread.h	/^    uint32_t edx;$/;"	m	struct:intr_stack
edx	a/userprog/tss.c	/^    uint32_t edx;$/;"	m	struct:tss	file:
edx	b/thread/thread.h	/^    uint32_t edx;$/;"	m	struct:intr_stack
edx	b/userprog/tss.c	/^    uint32_t edx;$/;"	m	struct:tss	file:
eflags	a/thread/thread.h	/^    uint32_t eflags;$/;"	m	struct:intr_stack
eflags	a/userprog/tss.c	/^    uint32_t eflags;$/;"	m	struct:tss	file:
eflags	b/thread/thread.h	/^    uint32_t eflags;$/;"	m	struct:intr_stack
eflags	b/userprog/tss.c	/^    uint32_t eflags;$/;"	m	struct:tss	file:
eip	a/thread/thread.h	/^    void (*eip) (void);$/;"	m	struct:intr_stack
eip	a/thread/thread.h	/^   void (*eip) (thread_func* func, void* func_arg);$/;"	m	struct:thread_stack
eip	a/userprog/tss.c	/^    uint32_t (*eip) (void);$/;"	m	struct:tss	file:
eip	b/thread/thread.h	/^    void (*eip) (void);$/;"	m	struct:intr_stack
eip	b/thread/thread.h	/^   void (*eip) (thread_func* func, void* func_arg);$/;"	m	struct:thread_stack
eip	b/userprog/tss.c	/^    uint32_t (*eip) (void);$/;"	m	struct:tss	file:
elapsed_ticks	a/thread/thread.h	/^   uint32_t elapsed_ticks;$/;"	m	struct:task_struct
elapsed_ticks	b/thread/thread.h	/^   uint32_t elapsed_ticks;$/;"	m	struct:task_struct
elem2entry	a/lib/kernel/list.h	6;"	d
elem2entry	b/lib/kernel/list.h	6;"	d
elem_find	a/lib/kernel/list.c	/^bool elem_find(struct list* plist, struct list_elem* obj_elem) {$/;"	f
elem_find	b/lib/kernel/list.c	/^bool elem_find(struct list* plist, struct list_elem* obj_elem) {$/;"	f
enter	a/device/keyboard.c	14;"	d	file:
enter	b/device/keyboard.c	14;"	d	file:
enter_kernel	a/boot/loader.S	/^enter_kernel:    $/;"	l
enter_kernel	b/boot/loader.S	/^enter_kernel:    $/;"	l
err_code	a/thread/thread.h	/^    uint32_t err_code;		 \/\/ err_code会被压入在eip之后$/;"	m	struct:intr_stack
err_code	b/thread/thread.h	/^    uint32_t err_code;		 \/\/ err_code会被压入在eip之后$/;"	m	struct:intr_stack
es	a/thread/thread.h	/^    uint32_t es;$/;"	m	struct:intr_stack
es	a/userprog/tss.c	/^    uint32_t es;$/;"	m	struct:tss	file:
es	b/thread/thread.h	/^    uint32_t es;$/;"	m	struct:intr_stack
es	b/userprog/tss.c	/^    uint32_t es;$/;"	m	struct:tss	file:
esc	a/device/keyboard.c	11;"	d	file:
esc	b/device/keyboard.c	11;"	d	file:
esi	a/thread/thread.h	/^    uint32_t esi;$/;"	m	struct:intr_stack
esi	a/thread/thread.h	/^   uint32_t esi;$/;"	m	struct:thread_stack
esi	a/userprog/tss.c	/^    uint32_t esi;$/;"	m	struct:tss	file:
esi	b/thread/thread.h	/^    uint32_t esi;$/;"	m	struct:intr_stack
esi	b/thread/thread.h	/^   uint32_t esi;$/;"	m	struct:thread_stack
esi	b/userprog/tss.c	/^    uint32_t esi;$/;"	m	struct:tss	file:
esp	a/thread/thread.h	/^    void* esp;$/;"	m	struct:intr_stack
esp	a/userprog/tss.c	/^    uint32_t esp;$/;"	m	struct:tss	file:
esp	b/thread/thread.h	/^    void* esp;$/;"	m	struct:intr_stack
esp	b/userprog/tss.c	/^    uint32_t esp;$/;"	m	struct:tss	file:
esp0	a/userprog/tss.c	/^    uint32_t* esp0;$/;"	m	struct:tss	file:
esp0	b/userprog/tss.c	/^    uint32_t* esp0;$/;"	m	struct:tss	file:
esp1	a/userprog/tss.c	/^    uint32_t* esp1;$/;"	m	struct:tss	file:
esp1	b/userprog/tss.c	/^    uint32_t* esp1;$/;"	m	struct:tss	file:
esp2	a/userprog/tss.c	/^    uint32_t* esp2;$/;"	m	struct:tss	file:
esp2	b/userprog/tss.c	/^    uint32_t* esp2;$/;"	m	struct:tss	file:
esp_dummy	a/thread/thread.h	/^    uint32_t esp_dummy;	 \/\/ 虽然pushad把esp也压入,但esp是不断变化的,所以会被popad忽略$/;"	m	struct:intr_stack
esp_dummy	b/thread/thread.h	/^    uint32_t esp_dummy;	 \/\/ 虽然pushad把esp也压入,但esp是不断变化的,所以会被popad忽略$/;"	m	struct:intr_stack
exception_init	a/kernel/interrupt.c	/^static void exception_init(void) {			    \/\/ 完成一般中断处理函数注册及异常名称注册$/;"	f	file:
exception_init	b/kernel/interrupt.c	/^static void exception_init(void) {			    \/\/ 完成一般中断处理函数注册及异常名称注册$/;"	f	file:
ext_scancode	a/device/keyboard.c	/^static bool ctrl_status, shift_status, alt_status, caps_lock_status, ext_scancode;$/;"	v	file:
ext_scancode	b/device/keyboard.c	/^static bool ctrl_status, shift_status, alt_status, caps_lock_status, ext_scancode;$/;"	v	file:
extern	a/kernel/kernel.S	/^extern idt_table		 ;idt_table是C中注册的中断处理程序数组$/;"	l
extern	b/kernel/kernel.S	/^extern idt_table		 ;idt_table是C中注册的中断处理程序数组$/;"	l
false	a/kernel/global.h	81;"	d
false	b/kernel/global.h	123;"	d
frequency_set	a/device/timer.c	/^static void frequency_set(uint8_t counter_port, \\$/;"	f	file:
frequency_set	b/device/timer.c	/^static void frequency_set(uint8_t counter_port, \\$/;"	f	file:
fs	a/thread/thread.h	/^    uint32_t fs;$/;"	m	struct:intr_stack
fs	a/userprog/tss.c	/^    uint32_t fs;$/;"	m	struct:tss	file:
fs	b/thread/thread.h	/^    uint32_t fs;$/;"	m	struct:intr_stack
fs	b/userprog/tss.c	/^    uint32_t fs;$/;"	m	struct:tss	file:
func_arg	a/thread/thread.h	/^   void* func_arg;    \/\/ 由Kernel_thread所调用的函数所需的参数$/;"	m	struct:thread_stack
func_arg	b/thread/thread.h	/^   void* func_arg;    \/\/ 由Kernel_thread所调用的函数所需的参数$/;"	m	struct:thread_stack
func_offset_high_word	a/kernel/interrupt.c	/^   uint16_t    func_offset_high_word;$/;"	m	struct:gate_desc	file:
func_offset_high_word	b/kernel/interrupt.c	/^   uint16_t    func_offset_high_word;$/;"	m	struct:gate_desc	file:
func_offset_low_word	a/kernel/interrupt.c	/^   uint16_t    func_offset_low_word;$/;"	m	struct:gate_desc	file:
func_offset_low_word	b/kernel/interrupt.c	/^   uint16_t    func_offset_low_word;$/;"	m	struct:gate_desc	file:
function	a/lib/kernel/list.h	/^typedef bool (function)(struct list_elem*, int arg);$/;"	t
function	a/thread/thread.h	/^   thread_func* function;   \/\/ 由Kernel_thread所调用的函数名$/;"	m	struct:thread_stack
function	b/lib/kernel/list.h	/^typedef bool (function)(struct list_elem*, int arg);$/;"	t
function	b/thread/thread.h	/^   thread_func* function;   \/\/ 由Kernel_thread所调用的函数名$/;"	m	struct:thread_stack
gate_desc	a/kernel/interrupt.c	/^struct gate_desc {$/;"	s	file:
gate_desc	b/kernel/interrupt.c	/^struct gate_desc {$/;"	s	file:
gdt_desc	a/kernel/global.h	/^struct gdt_desc {$/;"	s
gdt_desc	b/kernel/global.h	/^struct gdt_desc {$/;"	s
gdt_ptr	a/boot/loader.S	/^   gdt_ptr  dw  GDT_LIMIT $/;"	d
gdt_ptr	b/boot/loader.S	/^   gdt_ptr  dw  GDT_LIMIT $/;"	d
general_intr_handler	a/kernel/interrupt.c	/^static void general_intr_handler(uint8_t vec_nr) {$/;"	f	file:
general_intr_handler	b/kernel/interrupt.c	/^static void general_intr_handler(uint8_t vec_nr) {$/;"	f	file:
general_tag	a/thread/thread.h	/^   struct list_elem general_tag;				    $/;"	m	struct:task_struct	typeref:struct:task_struct::list_elem
general_tag	b/thread/thread.h	/^   struct list_elem general_tag;				    $/;"	m	struct:task_struct	typeref:struct:task_struct::list_elem
get_a_page	b/kernel/memory.c	/^void* get_a_page(enum pool_flags pf, uint32_t vaddr) {$/;"	f
get_kernel_pages	a/kernel/memory.c	/^void* get_kernel_pages(uint32_t pg_cnt) {$/;"	f
get_kernel_pages	b/kernel/memory.c	/^void* get_kernel_pages(uint32_t pg_cnt) {$/;"	f
get_user_pages	b/kernel/memory.c	/^void* get_user_pages(uint32_t pg_cnt) {$/;"	f
global	a/kernel/kernel.S	/^global intr_entry_table$/;"	l
global	a/kernel/kernel.S	/^global intr_exit$/;"	l
global	a/lib/kernel/print.S	/^global put_char$/;"	l
global	a/lib/kernel/print.S	/^global put_int$/;"	l
global	a/lib/kernel/print.S	/^global put_str$/;"	l
global	a/lib/kernel/print.S	/^global set_cursor$/;"	l
global	a/thread/switch.S	/^global switch_to$/;"	l
global	b/kernel/kernel.S	/^global intr_entry_table$/;"	l
global	b/kernel/kernel.S	/^global intr_exit$/;"	l
global	b/lib/kernel/print.S	/^global put_char$/;"	l
global	b/lib/kernel/print.S	/^global put_int$/;"	l
global	b/lib/kernel/print.S	/^global put_str$/;"	l
global	b/lib/kernel/print.S	/^global set_cursor$/;"	l
global	b/thread/switch.S	/^global switch_to$/;"	l
gs	a/thread/thread.h	/^    uint32_t gs;$/;"	m	struct:intr_stack
gs	a/userprog/tss.c	/^    uint32_t gs;$/;"	m	struct:tss	file:
gs	b/thread/thread.h	/^    uint32_t gs;$/;"	m	struct:intr_stack
gs	b/userprog/tss.c	/^    uint32_t gs;$/;"	m	struct:tss	file:
head	a/device/ioqueue.h	/^    int32_t head;			    \/\/ 队首,数据往队首处写入$/;"	m	struct:ioqueue
head	a/lib/kernel/list.h	/^   struct list_elem head;$/;"	m	struct:list	typeref:struct:list::list_elem
head	b/device/ioqueue.h	/^    int32_t head;			    \/\/ 队首,数据往队首处写入$/;"	m	struct:ioqueue
head	b/lib/kernel/list.h	/^   struct list_elem head;$/;"	m	struct:list	typeref:struct:list::list_elem
holder	a/thread/sync.h	/^   struct   task_struct* holder;	    \/\/ 锁的持有者$/;"	m	struct:lock	typeref:struct:lock::task_struct
holder	b/thread/sync.h	/^   struct   task_struct* holder;	    \/\/ 锁的持有者$/;"	m	struct:lock	typeref:struct:lock::task_struct
holder_repeat_nr	a/thread/sync.h	/^   uint32_t holder_repeat_nr;		    \/\/ 锁的持有者重复申请锁的次数$/;"	m	struct:lock
holder_repeat_nr	b/thread/sync.h	/^   uint32_t holder_repeat_nr;		    \/\/ 锁的持有者重复申请锁的次数$/;"	m	struct:lock
idt	a/kernel/interrupt.c	/^static struct gate_desc idt[IDT_DESC_CNT];   \/\/ idt是中断描述符表,本质上就是个中断门描述符数组$/;"	v	typeref:struct:gate_desc	file:
idt	b/kernel/interrupt.c	/^static struct gate_desc idt[IDT_DESC_CNT];   \/\/ idt是中断描述符表,本质上就是个中断门描述符数组$/;"	v	typeref:struct:gate_desc	file:
idt_desc_init	a/kernel/interrupt.c	/^static void idt_desc_init(void) {$/;"	f	file:
idt_desc_init	b/kernel/interrupt.c	/^static void idt_desc_init(void) {$/;"	f	file:
idt_init	a/kernel/interrupt.c	/^void idt_init() {$/;"	f
idt_init	b/kernel/interrupt.c	/^void idt_init() {$/;"	f
idt_table	a/kernel/interrupt.c	/^intr_handler idt_table[IDT_DESC_CNT];$/;"	v
idt_table	b/kernel/interrupt.c	/^intr_handler idt_table[IDT_DESC_CNT];$/;"	v
inb	a/lib/kernel/io.h	/^static inline uint8_t inb(uint16_t port) {$/;"	f
inb	b/lib/kernel/io.h	/^static inline uint8_t inb(uint16_t port) {$/;"	f
init_all	a/kernel/init.c	/^void init_all() {$/;"	f
init_all	b/kernel/init.c	/^void init_all() {$/;"	f
init_thread	a/thread/thread.c	/^void init_thread(struct task_struct* pthread, char* name, int prio) {$/;"	f
init_thread	b/thread/thread.c	/^void init_thread(struct task_struct* pthread, char* name, int prio) {$/;"	f
insw	a/lib/kernel/io.h	/^static inline void insw(uint16_t port, void* addr, uint32_t word_cnt) {$/;"	f
insw	b/lib/kernel/io.h	/^static inline void insw(uint16_t port, void* addr, uint32_t word_cnt) {$/;"	f
int16_t	a/lib/stdint.h	/^typedef signed short int int16_t;$/;"	t
int16_t	b/lib/stdint.h	/^typedef signed short int int16_t;$/;"	t
int32_t	a/lib/stdint.h	/^typedef signed int int32_t;$/;"	t
int32_t	b/lib/stdint.h	/^typedef signed int int32_t;$/;"	t
int64_t	a/lib/stdint.h	/^typedef signed long long int int64_t;$/;"	t
int64_t	b/lib/stdint.h	/^typedef signed long long int int64_t;$/;"	t
int8_t	a/lib/stdint.h	/^typedef signed char int8_t;$/;"	t
int8_t	b/lib/stdint.h	/^typedef signed char int8_t;$/;"	t
intr_disable	a/kernel/interrupt.c	/^enum intr_status intr_disable() {     $/;"	f
intr_disable	b/kernel/interrupt.c	/^enum intr_status intr_disable() {     $/;"	f
intr_enable	a/kernel/interrupt.c	/^enum intr_status intr_enable() {$/;"	f
intr_enable	b/kernel/interrupt.c	/^enum intr_status intr_enable() {$/;"	f
intr_entry_table	a/kernel/kernel.S	/^intr_entry_table:$/;"	l
intr_entry_table	b/kernel/kernel.S	/^intr_entry_table:$/;"	l
intr_exit	a/kernel/kernel.S	/^intr_exit:	     $/;"	l
intr_exit	b/kernel/kernel.S	/^intr_exit:	     $/;"	l
intr_get_status	a/kernel/interrupt.c	/^enum intr_status intr_get_status() {$/;"	f
intr_get_status	b/kernel/interrupt.c	/^enum intr_status intr_get_status() {$/;"	f
intr_handler	a/kernel/interrupt.h	/^typedef void* intr_handler;$/;"	t
intr_handler	b/kernel/interrupt.h	/^typedef void* intr_handler;$/;"	t
intr_keyboard_handler	a/device/keyboard.c	/^static void intr_keyboard_handler(void) {$/;"	f	file:
intr_keyboard_handler	b/device/keyboard.c	/^static void intr_keyboard_handler(void) {$/;"	f	file:
intr_name	a/kernel/interrupt.c	/^char* intr_name[IDT_DESC_CNT];		     \/\/ 用于保存异常的名字$/;"	v
intr_name	b/kernel/interrupt.c	/^char* intr_name[IDT_DESC_CNT];		     \/\/ 用于保存异常的名字$/;"	v
intr_set_status	a/kernel/interrupt.c	/^enum intr_status intr_set_status(enum intr_status status) {$/;"	f
intr_set_status	b/kernel/interrupt.c	/^enum intr_status intr_set_status(enum intr_status status) {$/;"	f
intr_stack	a/thread/thread.h	/^struct intr_stack {$/;"	s
intr_stack	b/thread/thread.h	/^struct intr_stack {$/;"	s
intr_status	a/kernel/interrupt.h	/^enum intr_status {		 \/\/ 中断状态$/;"	g
intr_status	b/kernel/interrupt.h	/^enum intr_status {		 \/\/ 中断状态$/;"	g
intr_timer_handler	a/device/timer.c	/^static void intr_timer_handler(void) {$/;"	f	file:
intr_timer_handler	b/device/timer.c	/^static void intr_timer_handler(void) {$/;"	f	file:
io_base	a/userprog/tss.c	/^    uint32_t io_base;$/;"	m	struct:tss	file:
io_base	b/userprog/tss.c	/^    uint32_t io_base;$/;"	m	struct:tss	file:
ioq_empty	a/device/ioqueue.c	/^static bool ioq_empty(struct ioqueue* ioq) {$/;"	f	file:
ioq_empty	b/device/ioqueue.c	/^static bool ioq_empty(struct ioqueue* ioq) {$/;"	f	file:
ioq_full	a/device/ioqueue.c	/^bool ioq_full(struct ioqueue* ioq) {$/;"	f
ioq_full	b/device/ioqueue.c	/^bool ioq_full(struct ioqueue* ioq) {$/;"	f
ioq_getchar	a/device/ioqueue.c	/^char ioq_getchar(struct ioqueue* ioq) {$/;"	f
ioq_getchar	b/device/ioqueue.c	/^char ioq_getchar(struct ioqueue* ioq) {$/;"	f
ioq_putchar	a/device/ioqueue.c	/^void ioq_putchar(struct ioqueue* ioq, char byte) {$/;"	f
ioq_putchar	b/device/ioqueue.c	/^void ioq_putchar(struct ioqueue* ioq, char byte) {$/;"	f
ioq_wait	a/device/ioqueue.c	/^static void ioq_wait(struct task_struct** waiter) {$/;"	f	file:
ioq_wait	b/device/ioqueue.c	/^static void ioq_wait(struct task_struct** waiter) {$/;"	f	file:
ioqueue	a/device/ioqueue.h	/^struct ioqueue {$/;"	s
ioqueue	b/device/ioqueue.h	/^struct ioqueue {$/;"	s
ioqueue_init	a/device/ioqueue.c	/^void ioqueue_init(struct ioqueue* ioq) {$/;"	f
ioqueue_init	b/device/ioqueue.c	/^void ioqueue_init(struct ioqueue* ioq) {$/;"	f
k_thread_a	a/kernel/main.c	/^void k_thread_a(void* arg) {     $/;"	f
k_thread_a	b/kernel/main.c	/^void k_thread_a(void* arg) {     $/;"	f
k_thread_b	a/kernel/main.c	/^void k_thread_b(void* arg) {     $/;"	f
k_thread_b	b/kernel/main.c	/^void k_thread_b(void* arg) {     $/;"	f
kbd_buf	a/device/keyboard.c	/^struct ioqueue kbd_buf;	   \/\/ 定义键盘缓冲区$/;"	v	typeref:struct:ioqueue
kbd_buf	b/device/keyboard.c	/^struct ioqueue kbd_buf;	   \/\/ 定义键盘缓冲区$/;"	v	typeref:struct:ioqueue
kernel_init	a/boot/loader.S	/^kernel_init:$/;"	l
kernel_init	b/boot/loader.S	/^kernel_init:$/;"	l
kernel_pool	a/kernel/memory.c	/^struct pool kernel_pool, user_pool;      \/\/ 生成内核内存池和用户内存池$/;"	v	typeref:struct:pool
kernel_pool	b/kernel/memory.c	/^struct pool kernel_pool, user_pool;      \/\/ 生成内核内存池和用户内存池$/;"	v	typeref:struct:pool
kernel_thread	a/thread/thread.c	/^static void kernel_thread(thread_func* function, void* func_arg) {$/;"	f	file:
kernel_thread	b/thread/thread.c	/^static void kernel_thread(thread_func* function, void* func_arg) {$/;"	f	file:
kernel_vaddr	a/kernel/memory.c	/^struct virtual_addr kernel_vaddr;	 \/\/ 此结构是用来给内核分配虚拟地址$/;"	v	typeref:struct:virtual_addr
kernel_vaddr	b/kernel/memory.c	/^struct virtual_addr kernel_vaddr;	 \/\/ 此结构是用来给内核分配虚拟地址$/;"	v	typeref:struct:virtual_addr
keyboard_init	a/device/keyboard.c	/^void keyboard_init() {$/;"	f
keyboard_init	b/device/keyboard.c	/^void keyboard_init() {$/;"	f
keymap	a/device/keyboard.c	/^static char keymap[][2] = {$/;"	v	file:
keymap	b/device/keyboard.c	/^static char keymap[][2] = {$/;"	v	file:
ldt	a/userprog/tss.c	/^    uint32_t ldt;$/;"	m	struct:tss	file:
ldt	b/userprog/tss.c	/^    uint32_t ldt;$/;"	m	struct:tss	file:
limit_high_attr_high	a/kernel/global.h	/^   uint8_t  limit_high_attr_high;$/;"	m	struct:gdt_desc
limit_high_attr_high	b/kernel/global.h	/^   uint8_t  limit_high_attr_high;$/;"	m	struct:gdt_desc
limit_low_word	a/kernel/global.h	/^   uint16_t limit_low_word;$/;"	m	struct:gdt_desc
limit_low_word	b/kernel/global.h	/^   uint16_t limit_low_word;$/;"	m	struct:gdt_desc
list	a/lib/kernel/list.h	/^struct list {$/;"	s
list	b/lib/kernel/list.h	/^struct list {$/;"	s
list_append	a/lib/kernel/list.c	/^void list_append(struct list* plist, struct list_elem* elem) {$/;"	f
list_append	b/lib/kernel/list.c	/^void list_append(struct list* plist, struct list_elem* elem) {$/;"	f
list_elem	a/lib/kernel/list.h	/^struct list_elem {$/;"	s
list_elem	b/lib/kernel/list.h	/^struct list_elem {$/;"	s
list_empty	a/lib/kernel/list.c	/^bool list_empty(struct list* plist) {		\/\/ 判断队列是否为空$/;"	f
list_empty	b/lib/kernel/list.c	/^bool list_empty(struct list* plist) {		\/\/ 判断队列是否为空$/;"	f
list_init	a/lib/kernel/list.c	/^void list_init (struct list* list) {$/;"	f
list_init	b/lib/kernel/list.c	/^void list_init (struct list* list) {$/;"	f
list_insert_before	a/lib/kernel/list.c	/^void list_insert_before(struct list_elem* before, struct list_elem* elem) { $/;"	f
list_insert_before	b/lib/kernel/list.c	/^void list_insert_before(struct list_elem* before, struct list_elem* elem) { $/;"	f
list_len	a/lib/kernel/list.c	/^uint32_t list_len(struct list* plist) {$/;"	f
list_len	b/lib/kernel/list.c	/^uint32_t list_len(struct list* plist) {$/;"	f
list_pop	a/lib/kernel/list.c	/^struct list_elem* list_pop(struct list* plist) {$/;"	f
list_pop	b/lib/kernel/list.c	/^struct list_elem* list_pop(struct list* plist) {$/;"	f
list_push	a/lib/kernel/list.c	/^void list_push(struct list* plist, struct list_elem* elem) {$/;"	f
list_push	b/lib/kernel/list.c	/^void list_push(struct list* plist, struct list_elem* elem) {$/;"	f
list_remove	a/lib/kernel/list.c	/^void list_remove(struct list_elem* pelem) {$/;"	f
list_remove	b/lib/kernel/list.c	/^void list_remove(struct list_elem* pelem) {$/;"	f
list_traversal	a/lib/kernel/list.c	/^struct list_elem* list_traversal(struct list* plist, function func, int arg) {$/;"	f
list_traversal	b/lib/kernel/list.c	/^struct list_elem* list_traversal(struct list* plist, function func, int arg) {$/;"	f
loader_start	a/boot/loader.S	/^   loader_start:$/;"	l
loader_start	b/boot/loader.S	/^   loader_start:$/;"	l
lock	a/device/ioqueue.h	/^    struct lock lock;$/;"	m	struct:ioqueue	typeref:struct:ioqueue::lock
lock	a/thread/sync.h	/^struct lock {$/;"	s
lock	b/device/ioqueue.h	/^    struct lock lock;$/;"	m	struct:ioqueue	typeref:struct:ioqueue::lock
lock	b/kernel/memory.c	/^   struct lock lock;		 \/\/ 申请内存时互斥$/;"	m	struct:pool	typeref:struct:pool::lock	file:
lock	b/thread/sync.h	/^struct lock {$/;"	s
lock_acquire	a/thread/sync.c	/^void lock_acquire(struct lock* plock) {$/;"	f
lock_acquire	b/thread/sync.c	/^void lock_acquire(struct lock* plock) {$/;"	f
lock_init	a/thread/sync.c	/^void lock_init(struct lock* plock) {$/;"	f
lock_init	b/thread/sync.c	/^void lock_init(struct lock* plock) {$/;"	f
lock_release	a/thread/sync.c	/^void lock_release(struct lock* plock) {$/;"	f
lock_release	b/thread/sync.c	/^void lock_release(struct lock* plock) {$/;"	f
main	a/kernel/main.c	/^int main(void) {$/;"	f
main	b/kernel/main.c	/^int main(void) {$/;"	f
main_thread	a/thread/thread.c	/^struct task_struct* main_thread;    \/\/ 主线程PCB$/;"	v	typeref:struct:task_struct
main_thread	b/thread/thread.c	/^struct task_struct* main_thread;    \/\/ 主线程PCB$/;"	v	typeref:struct:task_struct
make_gdt_desc	a/userprog/tss.c	/^static struct gdt_desc make_gdt_desc(uint32_t* desc_addr, uint32_t limit, uint8_t attr_low, uint8_t attr_high) {$/;"	f	file:
make_gdt_desc	b/userprog/tss.c	/^static struct gdt_desc make_gdt_desc(uint32_t* desc_addr, uint32_t limit, uint8_t attr_low, uint8_t attr_high) {$/;"	f	file:
make_idt_desc	a/kernel/interrupt.c	/^static void make_idt_desc(struct gate_desc* p_gdesc, uint8_t attr, intr_handler function) { $/;"	f	file:
make_idt_desc	b/kernel/interrupt.c	/^static void make_idt_desc(struct gate_desc* p_gdesc, uint8_t attr, intr_handler function) { $/;"	f	file:
make_main_thread	a/thread/thread.c	/^static void make_main_thread(void) {$/;"	f	file:
make_main_thread	b/thread/thread.c	/^static void make_main_thread(void) {$/;"	f	file:
malloc_page	a/kernel/memory.c	/^void* malloc_page(enum pool_flags pf, uint32_t pg_cnt) {$/;"	f
malloc_page	b/kernel/memory.c	/^void* malloc_page(enum pool_flags pf, uint32_t pg_cnt) {$/;"	f
mem_cpy	a/boot/loader.S	/^mem_cpy:		      $/;"	l
mem_cpy	b/boot/loader.S	/^mem_cpy:		      $/;"	l
mem_init	a/kernel/memory.c	/^void mem_init() {$/;"	f
mem_init	b/kernel/memory.c	/^void mem_init() {$/;"	f
mem_pool_init	a/kernel/memory.c	/^static void mem_pool_init(uint32_t all_mem) {$/;"	f	file:
mem_pool_init	b/kernel/memory.c	/^static void mem_pool_init(uint32_t all_mem) {$/;"	f	file:
memcmp	a/lib/string.c	/^int memcmp(const void* a_, const void* b_, uint32_t size) {$/;"	f
memcmp	b/lib/string.c	/^int memcmp(const void* a_, const void* b_, uint32_t size) {$/;"	f
memcpy	a/lib/string.c	/^void memcpy(void* dst_, const void* src_, uint32_t size) {$/;"	f
memcpy	b/lib/string.c	/^void memcpy(void* dst_, const void* src_, uint32_t size) {$/;"	f
memset	a/lib/string.c	/^void memset(void* dst_, uint8_t value, uint32_t size) {$/;"	f
memset	b/lib/string.c	/^void memset(void* dst_, uint8_t value, uint32_t size) {$/;"	f
mul	a/boot/loader.S	/^      mul dx$/;"	d
mul	a/boot/mbr.S	/^      mul dx$/;"	d
mul	b/boot/loader.S	/^      mul dx$/;"	d
mul	b/boot/mbr.S	/^      mul dx$/;"	d
name	a/thread/thread.h	/^   char name[16];$/;"	m	struct:task_struct
name	b/thread/thread.h	/^   char name[16];$/;"	m	struct:task_struct
next	a/lib/kernel/list.h	/^   struct list_elem* next; \/\/ 后继结点$/;"	m	struct:list_elem	typeref:struct:list_elem::list_elem
next	b/lib/kernel/list.h	/^   struct list_elem* next; \/\/ 后继结点$/;"	m	struct:list_elem	typeref:struct:list_elem::list_elem
next_pos	a/device/ioqueue.c	/^static int32_t next_pos(int32_t pos) {$/;"	f	file:
next_pos	b/device/ioqueue.c	/^static int32_t next_pos(int32_t pos) {$/;"	f	file:
offset	a/lib/kernel/list.h	5;"	d
offset	b/lib/kernel/list.h	5;"	d
outb	a/lib/kernel/io.h	/^static inline void outb(uint16_t port, uint8_t data) {$/;"	f
outb	b/lib/kernel/io.h	/^static inline void outb(uint16_t port, uint8_t data) {$/;"	f
outsw	a/lib/kernel/io.h	/^static inline void outsw(uint16_t port, const void* addr, uint32_t word_cnt) {$/;"	f
outsw	b/lib/kernel/io.h	/^static inline void outsw(uint16_t port, const void* addr, uint32_t word_cnt) {$/;"	f
p_mode_start	a/boot/loader.S	/^p_mode_start:$/;"	l
p_mode_start	b/boot/loader.S	/^p_mode_start:$/;"	l
page_dir_activate	b/userprog/process.c	/^void page_dir_activate(struct task_struct* p_thread) {$/;"	f
page_table_add	a/kernel/memory.c	/^static void page_table_add(void* _vaddr, void* _page_phyaddr) {$/;"	f	file:
page_table_add	b/kernel/memory.c	/^static void page_table_add(void* _vaddr, void* _page_phyaddr) {$/;"	f	file:
palloc	a/kernel/memory.c	/^static void* palloc(struct pool* m_pool) {$/;"	f	file:
palloc	b/kernel/memory.c	/^static void* palloc(struct pool* m_pool) {$/;"	f	file:
panic_spin	a/kernel/debug.c	/^void panic_spin(char* filename,	       \\$/;"	f
panic_spin	b/kernel/debug.c	/^void panic_spin(char* filename,	       \\$/;"	f
pde_ptr	a/kernel/memory.c	/^uint32_t* pde_ptr(uint32_t vaddr) {$/;"	f
pde_ptr	b/kernel/memory.c	/^uint32_t* pde_ptr(uint32_t vaddr) {$/;"	f
pgdir	a/thread/thread.h	/^   uint32_t* pgdir;              \/\/ 进程自己页表的虚拟地址$/;"	m	struct:task_struct
pgdir	b/thread/thread.h	/^   uint32_t* pgdir;              \/\/ 进程自己页表的虚拟地址$/;"	m	struct:task_struct
phy_addr_start	a/kernel/memory.c	/^   uint32_t phy_addr_start;	 \/\/ 本内存池所管理物理内存的起始地址$/;"	m	struct:pool	file:
phy_addr_start	b/kernel/memory.c	/^   uint32_t phy_addr_start;	 \/\/ 本内存池所管理物理内存的起始地址$/;"	m	struct:pool	file:
pic_init	a/kernel/interrupt.c	/^static void pic_init(void) {$/;"	f	file:
pic_init	b/kernel/interrupt.c	/^static void pic_init(void) {$/;"	f	file:
pool	a/kernel/memory.c	/^struct pool {$/;"	s	file:
pool	b/kernel/memory.c	/^struct pool {$/;"	s	file:
pool_bitmap	a/kernel/memory.c	/^   struct bitmap pool_bitmap;	 \/\/ 本内存池用到的位图结构,用于管理物理内存$/;"	m	struct:pool	typeref:struct:pool::bitmap	file:
pool_bitmap	b/kernel/memory.c	/^   struct bitmap pool_bitmap;	 \/\/ 本内存池用到的位图结构,用于管理物理内存$/;"	m	struct:pool	typeref:struct:pool::bitmap	file:
pool_flags	a/kernel/memory.h	/^enum pool_flags {$/;"	g
pool_flags	b/kernel/memory.h	/^enum pool_flags {$/;"	g
pool_size	a/kernel/memory.c	/^   uint32_t pool_size;		 \/\/ 本内存池字节容量$/;"	m	struct:pool	file:
pool_size	b/kernel/memory.c	/^   uint32_t pool_size;		 \/\/ 本内存池字节容量$/;"	m	struct:pool	file:
pop	a/kernel/kernel.S	/^   pop ds$/;"	d
pop	b/kernel/kernel.S	/^   pop ds$/;"	d
prev	a/lib/kernel/list.h	/^   struct list_elem* prev; \/\/ 前躯结点$/;"	m	struct:list_elem	typeref:struct:list_elem::list_elem
prev	b/lib/kernel/list.h	/^   struct list_elem* prev; \/\/ 前躯结点$/;"	m	struct:list_elem	typeref:struct:list_elem::list_elem
priority	a/thread/thread.h	/^   uint8_t priority;$/;"	m	struct:task_struct
priority	b/thread/thread.h	/^   uint8_t priority;$/;"	m	struct:task_struct
process_activate	b/userprog/process.c	/^void process_activate(struct task_struct* p_thread) {$/;"	f
process_execute	b/userprog/process.c	/^void process_execute(void* filename, char* name) { $/;"	f
producer	a/device/ioqueue.h	/^    struct task_struct* producer;$/;"	m	struct:ioqueue	typeref:struct:ioqueue::task_struct
producer	b/device/ioqueue.h	/^    struct task_struct* producer;$/;"	m	struct:ioqueue	typeref:struct:ioqueue::task_struct
pte_ptr	a/kernel/memory.c	/^uint32_t* pte_ptr(uint32_t vaddr) {$/;"	f
pte_ptr	b/kernel/memory.c	/^uint32_t* pte_ptr(uint32_t vaddr) {$/;"	f
push	a/kernel/kernel.S	/^   push ds$/;"	d
push	b/kernel/kernel.S	/^   push ds$/;"	d
put_char	a/lib/kernel/print.S	/^put_char:$/;"	l
put_char	b/lib/kernel/print.S	/^put_char:$/;"	l
put_int	a/lib/kernel/print.S	/^put_int:$/;"	l
put_int	b/lib/kernel/print.S	/^put_int:$/;"	l
put_int_buffer	a/lib/kernel/print.S	/^put_int_buffer    dq    0     ; 定义8字节缓冲区用于数字到字符的转换$/;"	d
put_int_buffer	b/lib/kernel/print.S	/^put_int_buffer    dq    0     ; 定义8字节缓冲区用于数字到字符的转换$/;"	d
put_str	a/lib/kernel/print.S	/^put_str:$/;"	l
put_str	b/lib/kernel/print.S	/^put_str:$/;"	l
rd_disk_m_16	a/boot/mbr.S	/^rd_disk_m_16:	   $/;"	l
rd_disk_m_16	b/boot/mbr.S	/^rd_disk_m_16:	   $/;"	l
rd_disk_m_32	a/boot/loader.S	/^rd_disk_m_32:	   $/;"	l
rd_disk_m_32	b/boot/loader.S	/^rd_disk_m_32:	   $/;"	l
register_handler	a/kernel/interrupt.c	/^void register_handler(uint8_t vector_no, intr_handler function) {$/;"	f
register_handler	b/kernel/interrupt.c	/^void register_handler(uint8_t vector_no, intr_handler function) {$/;"	f
running_thread	a/thread/thread.c	/^struct task_struct* running_thread() {$/;"	f
running_thread	b/thread/thread.c	/^struct task_struct* running_thread() {$/;"	f
schedule	a/thread/thread.c	/^void schedule() {$/;"	f
schedule	b/thread/thread.c	/^void schedule() {$/;"	f
section	a/kernel/kernel.S	/^section .data$/;"	l
section	a/kernel/kernel.S	/^section .text$/;"	l
section	a/lib/kernel/print.S	/^section .data$/;"	l
section	a/lib/kernel/print.S	/^section .text$/;"	l
section	a/thread/switch.S	/^section .text$/;"	l
section	b/kernel/kernel.S	/^section .data$/;"	l
section	b/kernel/kernel.S	/^section .text$/;"	l
section	b/lib/kernel/print.S	/^section .data$/;"	l
section	b/lib/kernel/print.S	/^section .text$/;"	l
section	b/thread/switch.S	/^section .text$/;"	l
selector	a/kernel/interrupt.c	/^   uint16_t    selector;$/;"	m	struct:gate_desc	file:
selector	b/kernel/interrupt.c	/^   uint16_t    selector;$/;"	m	struct:gate_desc	file:
self_kstack	a/thread/thread.h	/^   uint32_t* self_kstack;	 \/\/ 各内核线程都用自己的内核栈$/;"	m	struct:task_struct
self_kstack	b/thread/thread.h	/^   uint32_t* self_kstack;	 \/\/ 各内核线程都用自己的内核栈$/;"	m	struct:task_struct
sema_down	a/thread/sync.c	/^void sema_down(struct semaphore* psema) {$/;"	f
sema_down	b/thread/sync.c	/^void sema_down(struct semaphore* psema) {$/;"	f
sema_init	a/thread/sync.c	/^void sema_init(struct semaphore* psema, uint8_t value) {$/;"	f
sema_init	b/thread/sync.c	/^void sema_init(struct semaphore* psema, uint8_t value) {$/;"	f
sema_up	a/thread/sync.c	/^void sema_up(struct semaphore* psema) {$/;"	f
sema_up	b/thread/sync.c	/^void sema_up(struct semaphore* psema) {$/;"	f
semaphore	a/thread/sync.h	/^   struct   semaphore semaphore;	    \/\/ 用二元信号量实现锁$/;"	m	struct:lock	typeref:struct:lock::semaphore
semaphore	a/thread/sync.h	/^struct semaphore {$/;"	s
semaphore	b/thread/sync.h	/^   struct   semaphore semaphore;	    \/\/ 用二元信号量实现锁$/;"	m	struct:lock	typeref:struct:lock::semaphore
semaphore	b/thread/sync.h	/^struct semaphore {$/;"	s
set_cursor	a/lib/kernel/print.S	/^set_cursor:$/;"	l
set_cursor	b/lib/kernel/print.S	/^set_cursor:$/;"	l
setup_page	a/boot/loader.S	/^setup_page:$/;"	l
setup_page	b/boot/loader.S	/^setup_page:$/;"	l
shift_l_char	a/device/keyboard.c	21;"	d	file:
shift_l_char	b/device/keyboard.c	21;"	d	file:
shift_l_make	a/device/keyboard.c	28;"	d	file:
shift_l_make	b/device/keyboard.c	28;"	d	file:
shift_r_char	a/device/keyboard.c	22;"	d	file:
shift_r_char	b/device/keyboard.c	22;"	d	file:
shift_r_make	a/device/keyboard.c	29;"	d	file:
shift_r_make	b/device/keyboard.c	29;"	d	file:
shift_status	a/device/keyboard.c	/^static bool ctrl_status, shift_status, alt_status, caps_lock_status, ext_scancode;$/;"	v	file:
shift_status	b/device/keyboard.c	/^static bool ctrl_status, shift_status, alt_status, caps_lock_status, ext_scancode;$/;"	v	file:
ss	a/thread/thread.h	/^    uint32_t ss;$/;"	m	struct:intr_stack
ss	a/userprog/tss.c	/^    uint32_t ss;$/;"	m	struct:tss	file:
ss	b/thread/thread.h	/^    uint32_t ss;$/;"	m	struct:intr_stack
ss	b/userprog/tss.c	/^    uint32_t ss;$/;"	m	struct:tss	file:
ss0	a/userprog/tss.c	/^    uint32_t ss0;$/;"	m	struct:tss	file:
ss0	b/userprog/tss.c	/^    uint32_t ss0;$/;"	m	struct:tss	file:
ss1	a/userprog/tss.c	/^    uint32_t ss1;$/;"	m	struct:tss	file:
ss1	b/userprog/tss.c	/^    uint32_t ss1;$/;"	m	struct:tss	file:
ss2	a/userprog/tss.c	/^    uint32_t ss2;$/;"	m	struct:tss	file:
ss2	b/userprog/tss.c	/^    uint32_t ss2;$/;"	m	struct:tss	file:
stack_magic	a/thread/thread.h	/^   uint32_t stack_magic;	 \/\/ 用这串数字做栈的边界标记,用于检测栈的溢出$/;"	m	struct:task_struct
stack_magic	b/thread/thread.h	/^   uint32_t stack_magic;	 \/\/ 用这串数字做栈的边界标记,用于检测栈的溢出$/;"	m	struct:task_struct
start_process	b/userprog/process.c	/^void start_process(void* filename_) {$/;"	f
status	a/thread/thread.h	/^   enum task_status status;$/;"	m	struct:task_struct	typeref:enum:task_struct::task_status
status	b/thread/thread.h	/^   enum task_status status;$/;"	m	struct:task_struct	typeref:enum:task_struct::task_status
strcat	a/lib/string.c	/^char* strcat(char* dst_, const char* src_) {$/;"	f
strcat	b/lib/string.c	/^char* strcat(char* dst_, const char* src_) {$/;"	f
strchr	a/lib/string.c	/^char* strchr(const char* str, const uint8_t ch) {$/;"	f
strchr	b/lib/string.c	/^char* strchr(const char* str, const uint8_t ch) {$/;"	f
strchrs	a/lib/string.c	/^uint32_t strchrs(const char* str, uint8_t ch) {$/;"	f
strchrs	b/lib/string.c	/^uint32_t strchrs(const char* str, uint8_t ch) {$/;"	f
strcmp	a/lib/string.c	/^int8_t strcmp (const char* a, const char* b) {$/;"	f
strcmp	b/lib/string.c	/^int8_t strcmp (const char* a, const char* b) {$/;"	f
strcpy	a/lib/string.c	/^char* strcpy(char* dst_, const char* src_) {$/;"	f
strcpy	b/lib/string.c	/^char* strcpy(char* dst_, const char* src_) {$/;"	f
strlen	a/lib/string.c	/^uint32_t strlen(const char* str) {$/;"	f
strlen	b/lib/string.c	/^uint32_t strlen(const char* str) {$/;"	f
strrchr	a/lib/string.c	/^char* strrchr(const char* str, const uint8_t ch) {$/;"	f
strrchr	b/lib/string.c	/^char* strrchr(const char* str, const uint8_t ch) {$/;"	f
switch_to	a/thread/switch.S	/^switch_to:$/;"	l
switch_to	b/thread/switch.S	/^switch_to:$/;"	l
tab	a/device/keyboard.c	13;"	d	file:
tab	b/device/keyboard.c	13;"	d	file:
tail	a/device/ioqueue.h	/^    int32_t tail;			    \/\/ 队尾,数据从队尾处读出$/;"	m	struct:ioqueue
tail	a/lib/kernel/list.h	/^   struct list_elem tail;$/;"	m	struct:list	typeref:struct:list::list_elem
tail	b/device/ioqueue.h	/^    int32_t tail;			    \/\/ 队尾,数据从队尾处读出$/;"	m	struct:ioqueue
tail	b/lib/kernel/list.h	/^   struct list_elem tail;$/;"	m	struct:list	typeref:struct:list::list_elem
task_status	a/thread/thread.h	/^enum task_status {$/;"	g
task_status	b/thread/thread.h	/^enum task_status {$/;"	g
task_struct	a/thread/thread.h	/^struct task_struct {$/;"	s
task_struct	b/thread/thread.h	/^struct task_struct {$/;"	s
test_var_a	b/kernel/main.c	/^int test_var_a = 0, test_var_b = 0;$/;"	v
test_var_b	b/kernel/main.c	/^int test_var_a = 0, test_var_b = 0;$/;"	v
thread_all_list	a/thread/thread.c	/^struct list thread_all_list;	    \/\/ 所有任务队列$/;"	v	typeref:struct:list
thread_all_list	b/thread/thread.c	/^struct list thread_all_list;	    \/\/ 所有任务队列$/;"	v	typeref:struct:list
thread_block	a/thread/thread.c	/^void thread_block(enum task_status stat) {$/;"	f
thread_block	b/thread/thread.c	/^void thread_block(enum task_status stat) {$/;"	f
thread_create	a/thread/thread.c	/^void thread_create(struct task_struct* pthread, thread_func function, void* func_arg) {$/;"	f
thread_create	b/thread/thread.c	/^void thread_create(struct task_struct* pthread, thread_func function, void* func_arg) {$/;"	f
thread_func	a/thread/thread.h	/^typedef void thread_func(void*);$/;"	t
thread_func	b/thread/thread.h	/^typedef void thread_func(void*);$/;"	t
thread_init	a/thread/thread.c	/^void thread_init(void) {$/;"	f
thread_init	b/thread/thread.c	/^void thread_init(void) {$/;"	f
thread_ready_list	a/thread/thread.c	/^struct list thread_ready_list;	    \/\/ 就绪队列$/;"	v	typeref:struct:list
thread_ready_list	b/thread/thread.c	/^struct list thread_ready_list;	    \/\/ 就绪队列$/;"	v	typeref:struct:list
thread_stack	a/thread/thread.h	/^struct thread_stack {$/;"	s
thread_stack	b/thread/thread.h	/^struct thread_stack {$/;"	s
thread_start	a/thread/thread.c	/^struct task_struct* thread_start(char* name, int prio, thread_func function, void* func_arg) {$/;"	f
thread_start	b/thread/thread.c	/^struct task_struct* thread_start(char* name, int prio, thread_func function, void* func_arg) {$/;"	f
thread_tag	a/thread/thread.c	/^static struct list_elem* thread_tag;\/\/ 用于保存队列中的线程结点$/;"	v	typeref:struct:list_elem	file:
thread_tag	b/thread/thread.c	/^static struct list_elem* thread_tag;\/\/ 用于保存队列中的线程结点$/;"	v	typeref:struct:list_elem	file:
thread_unblock	a/thread/thread.c	/^void thread_unblock(struct task_struct* pthread) {$/;"	f
thread_unblock	b/thread/thread.c	/^void thread_unblock(struct task_struct* pthread) {$/;"	f
ticks	a/device/timer.c	/^uint32_t ticks;          \/\/ ticks是内核自中断开启以来总共的嘀嗒数$/;"	v
ticks	a/thread/thread.h	/^   uint8_t ticks;	   \/\/ 每次在处理器上执行的时间嘀嗒数$/;"	m	struct:task_struct
ticks	b/device/timer.c	/^uint32_t ticks;          \/\/ ticks是内核自中断开启以来总共的嘀嗒数$/;"	v
ticks	b/thread/thread.h	/^   uint8_t ticks;	   \/\/ 每次在处理器上执行的时间嘀嗒数$/;"	m	struct:task_struct
timer_init	a/device/timer.c	/^void timer_init() {$/;"	f
timer_init	b/device/timer.c	/^void timer_init() {$/;"	f
total_mem_bytes	a/boot/loader.S	/^   total_mem_bytes dd 0					 $/;"	d
total_mem_bytes	b/boot/loader.S	/^   total_mem_bytes dd 0					 $/;"	d
trace	a/userprog/tss.c	/^    uint32_t trace;$/;"	m	struct:tss	file:
trace	b/userprog/tss.c	/^    uint32_t trace;$/;"	m	struct:tss	file:
true	a/kernel/global.h	80;"	d
true	b/kernel/global.h	122;"	d
tss	a/userprog/tss.c	/^static struct tss tss;$/;"	v	typeref:struct:tss	file:
tss	a/userprog/tss.c	/^struct tss {$/;"	s	file:
tss	b/userprog/tss.c	/^static struct tss tss;$/;"	v	typeref:struct:tss	file:
tss	b/userprog/tss.c	/^struct tss {$/;"	s	file:
tss_init	a/userprog/tss.c	/^void tss_init() {$/;"	f
tss_init	b/userprog/tss.c	/^void tss_init() {$/;"	f
u_prog_a	b/kernel/main.c	/^void u_prog_a(void) {$/;"	f
u_prog_b	b/kernel/main.c	/^void u_prog_b(void) {$/;"	f
uint16_t	a/lib/stdint.h	/^typedef unsigned short int uint16_t;$/;"	t
uint16_t	b/lib/stdint.h	/^typedef unsigned short int uint16_t;$/;"	t
uint32_t	a/lib/stdint.h	/^typedef unsigned int uint32_t;$/;"	t
uint32_t	b/lib/stdint.h	/^typedef unsigned int uint32_t;$/;"	t
uint64_t	a/lib/stdint.h	/^typedef unsigned long long int uint64_t;$/;"	t
uint64_t	b/lib/stdint.h	/^typedef unsigned long long int uint64_t;$/;"	t
uint8_t	a/lib/stdint.h	/^typedef unsigned char uint8_t;$/;"	t
uint8_t	b/lib/stdint.h	/^typedef unsigned char uint8_t;$/;"	t
unused_retaddr	a/thread/thread.h	/^   void (*unused_retaddr);$/;"	m	struct:thread_stack
unused_retaddr	b/thread/thread.h	/^   void (*unused_retaddr);$/;"	m	struct:thread_stack
update_tss_esp	a/userprog/tss.c	/^void update_tss_esp(struct task_struct* pthread) {$/;"	f
update_tss_esp	b/userprog/tss.c	/^void update_tss_esp(struct task_struct* pthread) {$/;"	f
user_pool	a/kernel/memory.c	/^struct pool kernel_pool, user_pool;      \/\/ 生成内核内存池和用户内存池$/;"	v	typeref:struct:
user_pool	b/kernel/memory.c	/^struct pool kernel_pool, user_pool;      \/\/ 生成内核内存池和用户内存池$/;"	v	typeref:struct:
userprog_vaddr	b/thread/thread.h	/^   struct virtual_addr userprog_vaddr;   \/\/ 用户进程的虚拟地址$/;"	m	struct:task_struct	typeref:struct:task_struct::virtual_addr
vaddr_bitmap	a/kernel/memory.h	/^   struct bitmap vaddr_bitmap;$/;"	m	struct:virtual_addr	typeref:struct:virtual_addr::bitmap
vaddr_bitmap	b/kernel/memory.h	/^   struct bitmap vaddr_bitmap;$/;"	m	struct:virtual_addr	typeref:struct:virtual_addr::bitmap
vaddr_get	a/kernel/memory.c	/^static void* vaddr_get(enum pool_flags pf, uint32_t pg_cnt) {$/;"	f	file:
vaddr_get	b/kernel/memory.c	/^static void* vaddr_get(enum pool_flags pf, uint32_t pg_cnt) {$/;"	f	file:
vaddr_start	a/kernel/memory.h	/^   uint32_t vaddr_start;$/;"	m	struct:virtual_addr
vaddr_start	b/kernel/memory.h	/^   uint32_t vaddr_start;$/;"	m	struct:virtual_addr
value	a/thread/sync.h	/^   uint8_t  value;$/;"	m	struct:semaphore
value	b/thread/sync.h	/^   uint8_t  value;$/;"	m	struct:semaphore
vec_no	a/thread/thread.h	/^    uint32_t vec_no;	 \/\/ kernel.S 宏VECTOR中push %1压入的中断号$/;"	m	struct:intr_stack
vec_no	b/thread/thread.h	/^    uint32_t vec_no;	 \/\/ kernel.S 宏VECTOR中push %1压入的中断号$/;"	m	struct:intr_stack
virtual_addr	a/kernel/memory.h	/^struct virtual_addr {$/;"	s
virtual_addr	b/kernel/memory.h	/^struct virtual_addr {$/;"	s
waiters	a/thread/sync.h	/^   struct   list waiters;$/;"	m	struct:semaphore	typeref:struct:semaphore::list
waiters	b/thread/sync.h	/^   struct   list waiters;$/;"	m	struct:semaphore	typeref:struct:semaphore::list
wakeup	a/device/ioqueue.c	/^static void wakeup(struct task_struct** waiter) {$/;"	f	file:
wakeup	b/device/ioqueue.c	/^static void wakeup(struct task_struct** waiter) {$/;"	f	file:
